python3 -m venv codemaster
source venv/bin/activate



Initialize a new Node.js application:
Run the following command and follow the prompts to create a new package.json file:

npm init -y

Install Express.js:
Run the following command to install Express.js, a minimal web application framework:

npm install express



Create your application file:
 index.js:  add the following code to it:

const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello World!');
});

app.listen(port, () => {
  console.log(`App running on http://localhost:${port}`);
});


Create a Dockerfile:
Create a new file named Dockerfile and add the following code to it:

#####Dockerfile#######

# Use an official Node.js runtime as the base image
FROM node:16

# Set the working directory in the container to /app
WORKDIR /app

# Copy package.json and package-lock.json to the working directory
COPY package*.json ./

# Install the application dependencies
RUN npm install

# Copy the rest of the application code to the working directory
COPY . .

# Make port 3000 available outside the container
EXPOSE 3000

# Run the application when the container launches
CMD [ "npm", "start" ]



Create a versioning script:
Create a new file named version.sh and add the provided script to it. Then, make it executable by running the following command:


#!/bin/bash

# Define colors for better output visibility
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to display a banner with the script name
function print_banner() {
    echo -e "${BLUE}============================================${NC}"
    echo -e "${BLUE}=== Semantic Versioning Tag Incrementer ===${NC}"
    echo -e "${BLUE}============================================${NC}"
}

# Function to display usage information
function print_usage() {
    echo -e "${GREEN}Usage: $0 -v [Release|Hotfix|Patch]${NC}"
    echo -e "${GREEN}Example: $0 -v Patch${NC}"
}

# Function to handle incorrect input
function handle_incorrect_input() {
    echo -e "${RED}No version type (https://semver.org/) or incorrect type specified, try: -v [Release, Hotfix, Patch]${NC}"
    print_usage
    exit 1
}

# Function to handle successful tagging
function handle_success() {
    echo -e "${GREEN}Tagged with $NEW_TAG${NC}"
    git tag $NEW_TAG
    git push --tags
    git push
}

# Function to handle case when a tag already exists on this commit
function handle_existing_tag() {
    echo -e "${RED}Already a tag on this commit${NC}"
}

# Print the banner
print_banner

# Get parameters
while getopts v: flag
do
    case "${flag}" in
        v) VERSION=${OPTARG};;
    esac
done

# Fetch the highest tag number, and add v0.1.0 if doesn't exist
git fetch --prune --unshallow 2>/dev/null
CURRENT_VERSION=`git describe --abbrev=0 --tags 2>/dev/null`

if [[ $CURRENT_VERSION == '' ]]
then
    CURRENT_VERSION='v0.1.0'
fi
echo -e "${GREEN}Current Version: $CURRENT_VERSION${NC}"

# Replace . with space so can split into an array
CURRENT_VERSION_PARTS=(${CURRENT_VERSION//./ })

# Get number parts
VNUM1=${CURRENT_VERSION_PARTS[0]}
VNUM2=${CURRENT_VERSION_PARTS[1]}
VNUM3=${CURRENT_VERSION_PARTS[2]}

# Increment version numbers based on input
if [[ $VERSION == 'Release' ]]
then
    VNUM1=v$((VNUM1+1))
elif [[ $VERSION == 'Hotfix' ]]
then
    VNUM2=$((VNUM2+1))
elif [[ $VERSION == 'Patch' ]]
then
    VNUM3=$((VNUM3+1))
else
    handle_incorrect_input
fi

# Create new tag
NEW_TAG="$VNUM1.$VNUM2.$VNUM3"
echo -e "${GREEN}($VERSION) updating $CURRENT_VERSION to $NEW_TAG${NC}"

# Get current hash and see if it already has a tag
GIT_COMMIT=`git rev-parse HEAD`
NEEDS_TAG=`git describe --contains $GIT_COMMIT 2>/dev/null`

# Only tag if no tag already (also check NEEDS_TAG here)
if [ -z "$NEEDS_TAG" ]; then
    handle_success
else
    handle_existing_tag
fi

echo ::set-output name=git-tag::$NEW_TAG

exit 0


chmod +x version.sh




git add .
git commit -m "Initial commit"




mkdir .github/workflows/docker-publish.yaml

name: Build and Push Node.js Image to AWS ECR

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  # replace with your AWS region

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Automatic Tagging of Releases
      id: increment-git-tag
      run: |
        chmod +x version.sh
        ./version.sh -v Hotfix
      env:
        GIT_AUTHOR_NAME: github-actions
        GIT_AUTHOR_EMAIL: github-actions@github.com

    - name: Build, Tag, and Push the Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: nodejsapp  # replace with your ECR repository name
        IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG




create aws IAM user which  needs the AmazonEC2ContainerRegistryFullAccess policy, which provides full access to all ECR operations and resources. This policy allows the user to create, manage, and delete ECR repositories, and push and pull images.

Open the IAM console at https://console.aws.amazon.com/iam/.
In the navigation pane, choose Users.
Choose the name of the user to whom you want to attach the policy.
Choose the Permissions tab, and then choose Add permissions.
Choose Attach existing policies directly.
In the search box, type AmazonEC2ContainerRegistryFullAccess and select the checkbox next to it.
Choose Review, and then choose Add permissions.
If your user needs to perform other AWS operations as part of your CI/CD pipeline, you might need to attach additional policies or create a custom policy that grants the necessary permissions.



In your GitHub repository, go to the repository's settings, then to the "Secrets" section. Here, add your AWS Access Key ID and AWS Secret Access Key as secrets. Let's call these secrets AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.






Nodeapp
├── .github
│   └── workflows
│       └── docker-publish.yml
├── node_modules
├── Dockerfile
├── index.js
├── package.json
├── package-lock.json
└── version.sh


